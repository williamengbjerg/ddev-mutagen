#!/bin/bash

## Description: Runs mutagen on the current project
## Usage: mutagen
## Example: "ddev mutagen run/stop"

END="$(tput sgr0)"
GREEN="$(tput setaf 2)"
YELLOW="$(tput setaf 3)"
RED="$(tput setaf 1)"

function require_program {
    if ! type "$1" > /dev/null 2>&1; then
        echo "${RED}$1 is required. Please install it and try again.${END}"
        exit 1
    fi
}

require_program "mutagen"

# Prevent invalid session name errors.
SANITIZED_SITE_NAME=${DDEV_SITENAME//[^a-zA-Z0-9]/}

function mutagen_create_docker_sync() {
  mutagen sync create ${DDEV_APPROOT} docker://ddev-${DDEV_SITENAME}-web/var/www/html --ignore-vcs --ignore=.ddev/project-stopped --sync-mode=two-way-resolved --symlink-mode=posix-raw --name="$SANITIZED_SITE_NAME"
}

# Wait for the initial sync process to complete, watch for errors and return when ready.
function initial_sync() {

    echo "${YELLOW}Waiting for initial sync to complete...${END}"
    while true; do
        if mutagen sync list "$SANITIZED_SITE_NAME" | grep "Last error"; then
            echo "${RED}Mutagen sync has errored -- check 'mutagen sync list $SANITIZED_SITE_NAME' for the problem${END}"
            break
        fi
        if mutagen sync list "$SANITIZED_SITE_NAME" | grep "Status: Watching for changes"; then
            echo "${GREEN}Initial mutagen sync has completed!${END}"
            break
        fi
    done
}

# Create the sync process from the ddev project name.
function mutagen_create_filename() {
    echo "$SANITIZED_SITE_NAME" > ${DDEV_APPROOT}/.ddev/.mutagen-sync-name
}

function clear_test_files() {
    # Clear out the test files that are bundled with the web container.
    find . -maxdepth 1 ! -name ".ddev" ! -name . -exec rm -r {} \;
    ddev . rm -rf /var/www/html/{test,index.html}
}

function backup_files() {
    # Backup files before they getting deleted from the web-container
    rsync -azP -aR --exclude '.ddev*' . .ddev/project-stopped --delete --quiet
    echo "${GREEN}[√] Host-files has been backup${END}"
}

function retrieve_backup_files() {
  # Retrieve backup files
  rsync -azP --del --exclude '.ddev/*' .ddev/project-stopped/ ./ --quiet
  echo "${GREEN}[√] Backup files has been retrieved${END}"
}

if [ "$1" == "run" ]; then

      # Don't recreate mutagen sync if it already exists.
      if [[ -f "${DDEV_APPROOT}/.ddev/.mutagen-sync-name" && -d ".ddev/project-stopped" && -n "$(ls -A .ddev/project-stopped/)" ]]; then

          echo "${YELLOW}[!] Mutagen sync appears to already be running${END}"
          echo "${YELLOW}Waiting for initial re-sync...${END}"

          if [ "$(ls -A .)" ]; then
               backup_files
          else
              retrieve_backup_files
          fi

          # clear_test_files
          # echo "${YELLOW}[!] Cleared test-files${END}"

          mutagen sync terminate "$SANITIZED_SITE_NAME"
          rm -rf "${DDEV_APPROOT}/.ddev/.mutagen-sync-name"
          mutagen_create_docker_sync
          initial_sync
          exit
      fi

      backup_files
      # clear_test_files

      echo "${YELLOW}Starting $SANITIZED_SITE_NAME${END}"
      mutagen_create_filename

      if ! mutagen sync list "$SANITIZED_SITE_NAME" 2>/dev/null; then
        mutagen_create_docker_sync
      fi

      initial_sync

fi

if [ "$1" == "backup" ]; then

    backup_files

fi

if [ "$1" == "stop" -o "$1" == "pause" ]; then

    echo "${YELLOW}Ending mutagen sync process: $SANITIZED_SITE_NAME ${END}"
    rm -rf "${DDEV_APPROOT}/.ddev/.mutagen-sync-name"
    mutagen sync flush "$SANITIZED_SITE_NAME"
    mutagen sync terminate "$SANITIZED_SITE_NAME"

fi
